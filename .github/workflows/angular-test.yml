name: Angular Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main, master, develop ]

# Add permissions configuration
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Angular CLI
      run: npm install -g @angular/cli
    
    - name: Verify Angular CLI installation
      run: ng version
    
    - name: Install Chrome for testing
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Verify Chrome installation
      run: |
        google-chrome --version
        which google-chrome
    
    - name: Run tests
      id: test
      run: |
        export CHROME_BIN=/usr/bin/google-chrome
        ng test --no-watch --browsers=ChromeHeadless --no-progress
    
    - name: Build
      run: ng build

    - name: Generate test coverage report
      run: |
        export CHROME_BIN=/usr/bin/google-chrome
        ng test --no-watch --browsers=ChromeHeadless --code-coverage --no-progress
      
    - name: Archive code coverage results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ./coverage/
        retention-days: 5

    - name: Post test status comment
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const outcome = "${{ job.status }}".toLowerCase();
          const emoji = outcome === 'success' ? '✅' : '❌';
          const message = `${emoji} Tests ${outcome}!
          
          Unit test results:
          - Tests executed: ${{ steps.test.outputs.tests_executed || 'N/A' }}
          - Tests passed: ${{ steps.test.outputs.tests_passed || 'N/A' }}
          - Tests failed: ${{ steps.test.outputs.tests_failed || 'N/A' }}
          
          See workflow details [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
            console.log('Comment posted successfully');
          } catch (error) {
            console.log('Error posting comment:', error.message);
            // Don't fail the workflow if comment posting fails
            console.log('Continuing workflow despite comment error');
          }
          
  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Install Angular CLI
      run: npm install -g @angular/cli
    
    - name: Build
      run: ng build
      
    # Add your deployment step here, such as:
    # - name: Deploy to Netlify
    #   uses: nwtgck/actions-netlify@v2.0
    #   with:
    #     publish-dir: './dist/huzur-mostar/browser'
    #     production-branch: main
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     deploy-message: "Deploy from GitHub Actions"
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }} 